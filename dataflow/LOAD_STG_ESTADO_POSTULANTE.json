{
	"name": "LOAD_STG_ESTADO_POSTULANTE",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "AzureBlobStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "EstadoPostulanteCSV"
				},
				{
					"linkedService": {
						"referenceName": "UCSH_borrame",
						"type": "LinkedServiceReference"
					},
					"name": "EstadoPostulanteSQL"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "UCSH_borrame",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "CrearCRC"
				},
				{
					"name": "Exists"
				},
				{
					"name": "Lookup"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          estado_postulante_sk as integer,",
				"          codigo_estado_postulante as string,",
				"          estado_postulante as string,",
				"          origen as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     ignoreNoFilesFound: false,",
				"     enableCdc: true,",
				"     mode: 'read',",
				"     skipInitialLoad: true,",
				"     format: 'parquet',",
				"     container: 'storage-data',",
				"     folderPath: 'estado_postulante') ~> EstadoPostulanteCSV",
				"source(output(",
				"          ESTADO_POSTULANTE_SK as integer,",
				"          CODIGO_ESTADO_POSTULANTE as string,",
				"          ESTADO_POSTULANTE as string,",
				"          CRC as long,",
				"          FECHA_CREACION as timestamp,",
				"          FECHA_ACTUALIZACION as timestamp,",
				"          ORIGEN as string,",
				"          ETL_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'QA_STG_ESTADO_POSTULANTE',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> EstadoPostulanteSQL",
				"EstadoPostulanteCSV derive(CRC = crc32(codigo_estado_postulante,estado_postulante)) ~> CrearCRC",
				"CrearCRC, EstadoPostulanteSQL exists(CrearCRC@CRC == EstadoPostulanteSQL@CRC,",
				"     negate:true,",
				"     broadcast: 'auto')~> Exists",
				"Exists, EstadoPostulanteSQL lookup(EstadoPostulanteCSV@estado_postulante_sk == EstadoPostulanteSQL@ESTADO_POSTULANTE_SK,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> Lookup",
				"Lookup derive(FECHA_ACTUALIZACION = iif(CrearCRC@CRC != iifNull(EstadoPostulanteSQL@CRC, 0),\r",
				"currentTimestamp(),\r",
				"FECHA_ACTUALIZACION\r",
				")) ~> derivedColumn1",
				"derivedColumn1 alterRow(upsertIf(true())) ~> alterRow1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ESTADO_POSTULANTE_SK as integer,",
				"          CODIGO_ESTADO_POSTULANTE as string,",
				"          ESTADO_POSTULANTE as string,",
				"          CRC as integer,",
				"          FECHA_CREACION as timestamp,",
				"          FECHA_ACTUALIZACION as timestamp,",
				"          ORIGEN as string,",
				"          ETL_ID as integer",
				"     ),",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'QA_STG_ESTADO_POSTULANTE',",
				"     insertable: false,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: true,",
				"     keys:['estado_postulante_sk'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          ESTADO_POSTULANTE_SK = EstadoPostulanteCSV@estado_postulante_sk,",
				"          CODIGO_ESTADO_POSTULANTE = EstadoPostulanteCSV@codigo_estado_postulante,",
				"          ESTADO_POSTULANTE = EstadoPostulanteCSV@estado_postulante,",
				"          ORIGEN = EstadoPostulanteCSV@origen,",
				"          CRC = CrearCRC@CRC,",
				"          FECHA_CREACION,",
				"          FECHA_ACTUALIZACION,",
				"          ETL_ID",
				"     )) ~> sink1"
			]
		}
	}
}